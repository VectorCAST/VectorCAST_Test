               #include "C:/VCAST/Tutorial/c/ctypes.h"
               struct table_data_type Get_Table_Record(table_index_type Table);
               void Update_Table_Record(table_index_type Table, struct table_data_type Data);
               /* Allow 10 Parties to wait */
               static name_type WaitingList[10];
               static unsigned int WaitingListSize = 0;
               static unsigned int WaitingListIndex = 0;
               int Add(int a, int b)
               {
1 0     ( )    Add
1 1              int sum = 0;
1 2              sum = a + b;
1 3              return sum;
               }
               /* This function will add a free dessert to specific orders based on the 
                  entree, salad, and beverage choice */
               void Add_Included_Dessert(struct order_type* Order)
               {
2 0     ( )    Add_Included_Dessert
2 1     ( )( )   if(
2 1.1   ( )( )   Order->Entree == STEAK &&
2 1.2   ( )( )   Order->Salad == CAESAR &&
2 1.3   ( )( )   Order->Beverage == MIXED_DRINK) {
2 2                Order->Dessert = PIE;
                 } else 
2 3     ( )( )     if(
2 3.1   ( )( )     Order->Entree == LOBSTER &&
2 3.2   ( )( )     Order->Salad == GREEN &&
2 3.3   ( )( )     Order->Beverage == WINE) {
2 4                  Order->Dessert = CAKE;
                 }
               }
               int Place_Order(table_index_type Table,
                               seat_index_type Seat,
                               struct order_type Order)
               {
                 struct table_data_type Table_Data;
3 0     ( )    Place_Order
3 1              Table_Data = Get_Table_Record(Table);
3 2              Table_Data.Is_Occupied = v_true;
3 3              Table_Data.Number_In_Party = Table_Data.Number_In_Party + 1;
3 4              Table_Data.Order[Seat] = Order;
                 /* Add a free dessert in some cases */
3 5              Add_Included_Dessert(&Table_Data.Order[Seat]);
3 6              switch(Order.Entree)
                   {
3 7     ( )        case NO_ENTREE :
3 8                  break;
3 9     ( )        case STEAK :
3 10                 Table_Data.Check_Total = Table_Data.Check_Total + 14.0;
3 11                 break;
3 12    ( )        case CHICKEN :
3 13                 Table_Data.Check_Total = Table_Data.Check_Total + 10.0;
3 14                 break;
3 15    ( )        case LOBSTER :
3 16                 Table_Data.Check_Total = Table_Data.Check_Total + 18.0;
3 17                 break;
3 18    ( )        case PASTA :
3 19                 Table_Data.Check_Total = Table_Data.Check_Total + 12.0;
3 20                 break;
                   }
3 21             Update_Table_Record(Table, Table_Data);
3 22             return 0;
               }
               int Clear_Table(table_index_type Table)
               {
                 struct table_data_type Table_Data;
                 seat_index_type Seat;
4 0     ( )    Clear_Table
4 1              Table_Data = Get_Table_Record(Table);
4 2              Table_Data.Is_Occupied = v_false;
4 3              Table_Data.Number_In_Party = 1;
4 4     ( )( )   for (Seat=0; 
4 4.1   ( )( )   Seat < 4; Seat++){
4 5                Table_Data.Order[Seat].Soup = NO_SOUP;
4 6                Table_Data.Order[Seat].Salad = NO_SALAD;
4 7                Table_Data.Order[Seat].Entree = NO_ENTREE;
4 8                Table_Data.Order[Seat].Dessert = NO_DESSERT;
4 9                Table_Data.Order[Seat].Beverage = NO_BEVERAGE;
                  }
4 10             Table_Data.Check_Total = 0;
4 11             Update_Table_Record(Table, Table_Data);
4 12             return 0;
               }
               FLOAT Get_Check_Total(table_index_type Table)
               {
                 struct table_data_type Table_Data;
5 0     ( )    Get_Check_Total
5 1              Table_Data = Get_Table_Record(Table);
5 2              return (Table_Data.Check_Total);
               }
               void Add_Party_To_Waiting_List(char* Name)
               {
6 0     ( )    Add_Party_To_Waiting_List
6 1              int i = 0;
6 2     ( )( )   if(
6 2.1   ( )( )   WaitingListSize > 9)
6 3                WaitingListSize = 0;
6 4     ( )( )   while(
6 4.1   ( )( )   Name && 
6 4.2   ( )( )   *Name) {
6 5                WaitingList[WaitingListSize][i++] = *Name;
6 6                Name++;
                 }
6 7              WaitingList[WaitingListSize++][i] = 0;
               }
               char* Get_Next_Party_To_Be_Seated(void)
               {
7 0     ( )    Get_Next_Party_To_Be_Seated
7 1     ( )( )   if(
7 1.1   ( )( )   WaitingListIndex > 9)
7 2                WaitingListIndex = 0;
7 3              return WaitingList[WaitingListIndex++];
               }
